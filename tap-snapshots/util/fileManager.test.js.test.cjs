/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`util/fileManager.test.js > TAP > save() > must match snapshot 1`] = `
Array [
  Object {
    "args": Array [
      "Successfully wrote file",
    ],
    "at": CallSiteLike {
      "columnNumber": 15,
      "evalOrigin": undefined,
      "function": Function (err),
      "functionName": null,
      "generated": undefined,
      "isConstructor": false,
      "isEval": false,
      "isNative": false,
      "isToplevel": true,
      "lineNumber": 17,
      "methodName": null,
      "this": &ref_1 global {
        "atob": Function atob(input),
        "btoa": Function btoa(input),
        "clearImmediate": Function clearImmediate(immediate),
        "clearInterval": Function clearInterval(timer),
        "clearTimeout": Function clearTimeout(timer),
        "crypto": Crypto {},
        "fetch": Function value(input, init=undefined),
        "global": <*ref_1>,
        "performance": Performance {
          [Symbol(events.maxEventTargetListeners)]: 10,
          [Symbol(events.maxEventTargetListenersWarned)]: false,
          [Symbol(kEvents)]: SafeMap [],
          [Symbol(kHandlers)]: SafeMap [],
          [Symbol(performance)]: true,
        },
        "queueMicrotask": Function queueMicrotask(callback),
        "setImmediate": Function setImmediate(callback, arg1, arg2, arg3),
        "setInterval": Function setInterval(callback, repeat, arg1, arg2, arg3),
        "setTimeout": Function setTimeout(callback, after, arg1, arg2, arg3),
        "structuredClone": Function structuredClone(),
        [Symbol.for(@tapjs/mock.{CWD}/node_modules/@tapjs/mock/dist/commonjs/service-key.js)]: "3e49bbed334c75dc",
        [Symbol.for(@tapjs/processinfo lineLength cache)]: Map {},
        [Symbol.for(@tapjs/processinfo.ProcessInfoNodeData)]: Object {
          "argv": Array [
            "/Users/alexandermelfi/.nvm/versions/node/v20.13.1/bin/node",
            "{CWD}/util/fileManager.test.js",
          ],
          "cwd": "{CWD}",
          "date": "2024-05-22T15:03:11.085Z",
          "execArgv": Array [
            "--import=file://{CWD}/node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/import.mjs",
            "--import=file://{CWD}/node_modules/@tapjs/mock/dist/esm/import.mjs",
            "--enable-source-maps",
            "--import=file://{CWD}/node_modules/@tapjs/processinfo/dist/esm/import.mjs",
          ],
          "externalID": "util/fileManager.test.js",
          "files": Array [
            "{CWD}/util/fileManager.test.js",
            "{CWD}/node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/import.mjs",
            "{CWD}/node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/import-loader.mjs",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/import.mjs",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/mock-service.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/is-relative-require.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/export-line.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/munge-mocks.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/resolve-mock-entry-point.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/service-key.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/call-site-like.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/require-resolve.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-all-conditional-values.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-all-conditions.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-unique-condition-sets.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-all-local-imports.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-all-exports.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-conditional-value.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-import.js",
            "{CWD}/node_modules/resolve-import/dist/esm/is-windows.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-conditional-values-list.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/parse.js",
            "{CWD}/node_modules/resolve-import/dist/esm/errors.js",
            "{CWD}/node_modules/resolve-import/dist/esm/file-exists.js",
            "{CWD}/node_modules/resolve-import/dist/esm/find-dep-package.js",
            "{CWD}/node_modules/resolve-import/dist/esm/read-pkg.js",
            "{CWD}/node_modules/resolve-import/dist/esm/star-glob.js",
            "{CWD}/node_modules/resolve-import/dist/esm/to-file-url.js",
            "{CWD}/node_modules/resolve-import/dist/esm/to-path.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-named-exports-list.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-export.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-dependency-export.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-package-import.js",
            "{CWD}/node_modules/walk-up-path/dist/mjs/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/read-json.js",
            "{CWD}/node_modules/glob/dist/esm/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/find-star-match.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/glob.js",
            "{CWD}/node_modules/glob/dist/esm/has-magic.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/assert-valid-pattern.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/ast.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/escape.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/unescape.js",
            "{CWD}/node_modules/path-scurry/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/pattern.js",
            "{CWD}/node_modules/glob/dist/esm/walker.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/brace-expressions.js",
            "{CWD}/node_modules/lru-cache/dist/esm/index.js",
            "{CWD}/node_modules/minipass/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/ignore.js",
            "{CWD}/node_modules/glob/dist/esm/processor.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/loader.mjs",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/hooks.mjs",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/mock-service-client.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/mock-service.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/index.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/export-line.js",
            "{CWD}/node_modules/resolve-import/dist/esm/is-relative-require.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/munge-mocks.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/resolve-mock-entry-point.js",
            "{CWD}/node_modules/@tapjs/mock/dist/esm/service-key.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/call-site-like.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/require-resolve.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-all-conditional-values.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-unique-condition-sets.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-all-local-imports.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-all-conditions.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-all-exports.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-import.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-conditional-value.js",
            "{CWD}/node_modules/resolve-import/dist/esm/is-windows.js",
            "{CWD}/node_modules/@tapjs/stack/dist/esm/parse.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-conditional-values-list.js",
            "{CWD}/node_modules/resolve-import/dist/esm/errors.js",
            "{CWD}/node_modules/resolve-import/dist/esm/find-dep-package.js",
            "{CWD}/node_modules/resolve-import/dist/esm/file-exists.js",
            "{CWD}/node_modules/resolve-import/dist/esm/star-glob.js",
            "{CWD}/node_modules/resolve-import/dist/esm/read-pkg.js",
            "{CWD}/node_modules/resolve-import/dist/esm/to-path.js",
            "{CWD}/node_modules/resolve-import/dist/esm/get-named-exports-list.js",
            "{CWD}/node_modules/resolve-import/dist/esm/to-file-url.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-export.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-dependency-export.js",
            "{CWD}/node_modules/resolve-import/dist/esm/resolve-package-import.js",
            "{CWD}/node_modules/walk-up-path/dist/mjs/index.js",
            "{CWD}/node_modules/resolve-import/dist/esm/read-json.js",
            "{CWD}/node_modules/resolve-import/dist/esm/find-star-match.js",
            "{CWD}/node_modules/glob/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/has-magic.js",
            "{CWD}/node_modules/glob/dist/esm/glob.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/index.js",
            "{CWD}/node_modules/path-scurry/dist/esm/index.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/assert-valid-pattern.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/escape.js",
            "{CWD}/node_modules/glob/dist/esm/pattern.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/unescape.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/ast.js",
            "{CWD}/node_modules/glob/dist/esm/walker.js",
            "{CWD}/node_modules/glob/node_modules/minimatch/dist/esm/brace-expressions.js",
            "{CWD}/node_modules/lru-cache/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/ignore.js",
            "{CWD}/node_modules/minipass/dist/esm/index.js",
            "{CWD}/node_modules/glob/dist/esm/processor.js",
            "{CWD}/util/fileManager.test.js",
            "{CWD}/util/fileManager.js",
          ],
          "hrstart": Array [
            3463225,
            360275708,
          ],
          "NODE_OPTIONS": "\\"--import=file://{CWD}/node_modules/@tapjs/processinfo/dist/esm/import.mjs\\"",
          "parent": null,
          "pid": 73686,
          "ppid": 73685,
          "root": "29a69df9-c9cf-42b9-97e4-a39bea80442c",
          "sources": Null Object {},
          "uuid": "29a69df9-c9cf-42b9-97e4-a39bea80442c",
        },
        [Symbol.for(@tapjs/processinfo.registerRequire)]: true,
        [Symbol.for(3e49bbed334c75dc.instances)]: Map {},
        [Symbol.for(TAP private constructor)]: &ref_2 Object {
          "after": Function after(fn),
          "afterEach": Function afterEach(fn),
          "bailout": Function bailout(message),
          "Base": Function Base(classBaseextendsminipass_1.Minipass),
          "before": Function before(fn),
          "beforeEach": Function beforeEach(fn),
          "capture": Function capture(obj, method, impl=(..._),
          "captureFn": Function captureFn(original),
          "comment": Function comment(...args),
          "Counts": Function Counts(classCounts),
          "createMock": Function createMock(bases, overrides),
          "default": <*ref_2>,
          "doesNotThrow": Function doesNotThrow(fn, ...[msg, extra]),
          "emits": Function emits(emitter, event, ...[msg, extra]),
          "end": Function end(implicit),
          "error": Function error(er, ...[msg, extra]),
          "fail": Function fail(...[msg, extra]),
          "fixture": Function fixture(type, content),
          "has": Function has(found, wanted, ...[msg, extra]),
          "hasStrict": Function hasStrict(found, wanted, ...[msg, extra]),
          "intercept": Function intercept(obj, prop, desc, strictMode=true),
          "Lists": Function Lists(classLists),
          "match": Function match(found, wanted, ...[msg, extra]),
          "matchOnly": Function matchOnly(found, wanted, ...[msg, extra]),
          "matchOnlyStrict": Function matchOnlyStrict(found, wanted, ...[msg, extra]),
          "matchSnapshot": Function matchSnapshot(found, ...[msg, extra]),
          "matchStrict": Function matchStrict(found, wanted, ...[msg, extra]),
          "Minimal": Function Minimal(classMinimalextendstest_base_js_1.TestBase),
          "mockImport": Function mockImport(module, mocks=),
          "mockRequire": Function mockRequire(module, mocks=),
          "not": Function not(found, doNotWant, ...[msg, extra]),
          "notHas": Function notHas(found, doNotWant, ...[msg, extra]),
          "notHasStrict": Function notHasStrict(found, doNotWant, ...[msg, extra]),
          "notMatch": Function notMatch(found, doNotWant, ...[msg, extra]),
          "notMatchOnly": Function notMatchOnly(found, doNotWant, ...[msg, extra]),
          "notMatchOnlyStrict": Function notMatchOnlyStrict(found, doNotWant, ...[msg, extra]),
          "notMatchStrict": Function notMatchStrict(found, doNotWant, ...[msg, extra]),
          "notOk": Function notOk(obj, ...[msg, extra]),
          "notSame": Function notSame(found, doNotWant, ...[msg, extra]),
          "ok": Function ok(obj, ...[msg, extra]),
          "only": Function only(...args),
          "pass": Function pass(...[msg, extra]),
          "plan": Function plan(n, comment, implicit),
          "pragma": Function pragma(set),
          "same": Function same(found, wanted, ...[msg, extra]),
          "skip": Function skip(...args),
          "spawn": Function spawn(cmd, args, options, name),
          "Spawn": Function Spawn(classSpawnextendsbase_js_1.Base),
          "stdin": Function stdin(name, extra),
          "Stdin": Function Stdin(classStdinextendstap_file_js_1.TapFile),
          "stdinOnly": Function stdinOnly(extra),
          "strictNotSame": Function strictNotSame(found, doNotWant, ...[msg, extra]),
          "t": <*ref_2>,
          "TapFile": Function TapFile(classTapFileextendsbase_js_1.Base),
          "test": Function test(...args),
          "Test": Function Test(classTestextendscore_1.TestBase),
          "TestBase": Function TestBase(classTestBaseextendsbase_js_1.Base),
          "testdir": Function testdir(content),
          "throws": Function throws(fn, ...[wanted, msg, extra]),
          "timeout": Function timeout(options=),
          "todo": Function todo(...args),
          "type": Function type(obj, klass, ...[msg, extra]),
          "worker": Function worker(filename, options, name),
          "Worker": Function Worker(classWorkerextendsbase_js_1.Base),
        },
      },
      "typeName": null,
    },
    "receiver": console {
      "assert": Function assert(),
      "clear": Function clear(),
      "Console": Function Console(options/*or:stdout, stderr, ignoreErrors=true*/),
      "context": Function context(),
      "count": Function count(),
      "countReset": Function countReset(),
      "createTask": Function createTask(),
      "debug": Function debug(),
      "dir": Function dir(),
      "dirxml": Function dirxml(),
      "error": Function error(),
      "group": Function group(),
      "groupCollapsed": Function groupCollapsed(),
      "groupEnd": Function groupEnd(),
      "info": Function info(),
      "log": Function wrapped(...args),
      "profile": Function profile(),
      "profileEnd": Function profileEnd(),
      "table": Function table(),
      "time": Function time(),
      "timeEnd": Function timeEnd(),
      "timeLog": Function timeLog(),
      "timeStamp": Function timeStamp(),
      "trace": Function trace(),
      "warn": Function warn(),
    },
    "returned": undefined,
    "stack": String(
      util/fileManager.js:17:15
      Object.writeFileSync (util/fileManager.test.js:8:47)
      Object.save (util/fileManager.js:10:8)
      Test.<anonymous> (util/fileManager.test.js:22:15)
      
    ),
    "threw": false,
  },
]
`
